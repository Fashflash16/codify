{"version":3,"sources":["components/WindowHeader.tsx","components/CodeEditor.tsx","components/CaptureStage.tsx","components/Picker.tsx","components/ColorPicker.tsx","components/ToolbarToggle.tsx","components/LanguagePicker.tsx","components/OSPicker.tsx","Header.tsx","Footer.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["useStyles","makeStyles","spacing","createStyles","root","display","macOS","backgroundColor","grey","padding","windows10","justifyContent","linuxMint","dot","borderRadius","margin","height","width","green","yellow","red","square","WindowHeader","className","variant","classes","cx","IconButton","size","fontSize","style","color","flexDirection","overflow","marginBottom","content","flex","CodeEditor","language","lightMode","os","showLineNumbers","Paper","elevation","theme","value","options","selectOnLineNumbers","lineNumbers","minimap","enabled","CaptureStage","React","forwardRef","ref","fontColor","Typography","gutterBottom","contentEditable","spellCheck","suppressContentEditableWarning","withStyles","palette","button","children","id","icon","tooltip","useState","anchorEl","setAnchorEl","open","Boolean","popoverId","undefined","Tooltip","title","placement","aria-describedby","onClick","event","currentTarget","Popover","onClose","anchorOrigin","vertical","horizontal","transformOrigin","onChange","e","hex","ToolbarToggle","active","activeIcon","inactiveIcon","formControl","minWidth","languages","setLanguages","useEffect","monaco","init","then","getLanguages","map","aliases","alias","length","catch","error","console","handleChange","target","FormControl","InputLabel","shrink","Select","inputProps","name","index","MenuItem","key","alignItems","href","borderTop","divider","rel","Divider","orientation","toolbar","captureStageContainer","placeItems","justifyItems","borderLeft","fab","position","bottom","right","App","stageRef","useRef","setBackgroundColor","setFontColor","setShowLineNumbers","setLightMode","setOS","setLanguage","Fab","domtoimage","toBlob","current","blob","saveAs","Date","now","window","location","hostname","match","ReactDOM","render","StrictMode","themeType","unstable_createMuiStrictModeTheme","primary","main","secondary","type","muiTheme","CssBaseline","SnackbarProps","autoHideDuration","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.5ccf143a.chunk.js","sourcesContent":["import React from \"react\";\nimport { createStyles, IconButton, Theme } from \"@material-ui/core\";\nimport cx from \"classnames\";\nimport { green, grey, red, yellow } from \"@material-ui/core/colors\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport {\n  ArrowExpand,\n  WindowMinimize,\n  WindowMaximize,\n  WindowClose,\n  CloseCircle,\n} from \"mdi-material-ui\";\n\nconst useStyles = makeStyles(({ spacing }: Theme) =>\n  createStyles({\n    root: {\n      display: \"flex\",\n    },\n    macOS: {\n      backgroundColor: grey[300],\n      padding: spacing(0.5),\n    },\n    windows10: {\n      backgroundColor: \"#fff\",\n      justifyContent: \"flex-end\",\n    },\n    linuxMint: {\n      backgroundColor: \"#d3d4cf\",\n      justifyContent: \"flex-end\",\n      padding: spacing(0.5),\n    },\n    dot: {\n      borderRadius: \"50%\",\n      margin: spacing(0.25),\n      height: spacing(1),\n      width: spacing(1),\n    },\n    green: {\n      backgroundColor: green[500],\n    },\n    yellow: {\n      backgroundColor: yellow[800],\n    },\n    red: {\n      backgroundColor: red[500],\n    },\n    square: {\n      borderRadius: 0,\n    },\n  })\n);\n\ninterface Props {\n  className?: string;\n  variant?: \"macOS\" | \"windows10\" | \"linuxMint\";\n}\n\nconst WindowHeader = ({ className, variant = \"windows10\" }: Props) => {\n  const classes = useStyles();\n\n  switch (variant) {\n    case \"macOS\":\n      return (\n        <div className={cx(classes.root, classes.macOS, className)}>\n          <div className={cx(classes.dot, classes.red)} />\n          <div className={cx(classes.dot, classes.yellow)} />\n          <div className={cx(classes.dot, classes.green)} />\n        </div>\n      );\n    case \"windows10\":\n      return (\n        <div className={cx(classes.root, classes.windows10, className)}>\n          <IconButton size={\"small\"} className={classes.square}>\n            <WindowMinimize />\n          </IconButton>\n          <IconButton size={\"small\"} className={classes.square}>\n            <WindowMaximize />\n          </IconButton>\n          <IconButton size={\"small\"} className={classes.square}>\n            <WindowClose />\n          </IconButton>\n        </div>\n      );\n    case \"linuxMint\":\n      return (\n        <div className={cx(classes.root, classes.linuxMint, className)}>\n          <IconButton size={\"small\"}>\n            <WindowMinimize fontSize={\"small\"} />\n          </IconButton>\n          <IconButton size={\"small\"}>\n            <ArrowExpand fontSize={\"small\"} />\n          </IconButton>\n          <IconButton size={\"small\"}>\n            <CloseCircle fontSize={\"small\"} style={{ color: \"#78b375\" }} />\n          </IconButton>\n        </div>\n      );\n    default:\n      return <div className={cx(classes.root, className)} />;\n  }\n};\n\nexport default WindowHeader;\n","import React from \"react\";\nimport { Paper, makeStyles, Theme } from \"@material-ui/core\";\nimport { grey } from \"@material-ui/core/colors\";\nimport Editor from \"@monaco-editor/react\";\nimport WindowHeader from \"./WindowHeader\";\n\nconst useStyles = makeStyles(({ spacing }: Theme) => ({\n  root: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    overflow: \"hidden\",\n    width: 700,\n    height: 320,\n    backgroundColor: grey[700],\n    marginBottom: spacing(2),\n  },\n  content: {\n    flex: 1,\n  },\n}));\n\ninterface Props {\n  language: string;\n  lightMode: boolean;\n  os: \"macOS\" | \"windows10\" | \"linuxMint\";\n  showLineNumbers: boolean;\n}\n\nconst CodeEditor = ({ language, lightMode, os, showLineNumbers }: Props) => {\n  const classes = useStyles();\n\n  return (\n    <Paper className={classes.root} elevation={15}>\n      <WindowHeader variant={os} />\n      <div className={classes.content}>\n        <Editor\n          height={\"300px\"}\n          width={\"700px\"}\n          language={language}\n          theme={lightMode ? \"light\" : \"dark\"}\n          value={`const fun = () => {\n  console.log(\"Hello World!\")\n}`}\n          options={{\n            selectOnLineNumbers: false,\n            lineNumbers: showLineNumbers ? \"on\" : \"off\",\n            minimap: { enabled: false },\n          }}\n        />\n      </div>\n    </Paper>\n  );\n};\n\nexport default CodeEditor;\n","import React from \"react\";\nimport { Paper, makeStyles, Typography } from \"@material-ui/core\";\nimport cx from \"classnames\";\nimport CodeEditor from \"./CodeEditor\";\n\nconst useStyles = makeStyles(({ spacing }) => ({\n  root: {\n    padding: spacing(8),\n  },\n}));\n\ninterface Props {\n  className?: string;\n  backgroundColor: string;\n  fontColor: string;\n  language: string;\n  lightMode: boolean;\n  os: \"macOS\" | \"windows10\" | \"linuxMint\";\n  showLineNumbers: boolean;\n}\n\nconst CaptureStage = React.forwardRef(\n  (\n    {\n      backgroundColor,\n      className,\n      fontColor,\n      language,\n      lightMode,\n      os,\n      showLineNumbers,\n    }: Props,\n    ref\n  ) => {\n    const classes = useStyles();\n\n    return (\n      <Paper\n        ref={ref}\n        className={cx(classes.root, className)}\n        elevation={10}\n        square\n        style={{\n          backgroundColor,\n        }}\n      >\n        <Typography\n          variant={\"h3\"}\n          gutterBottom\n          contentEditable\n          spellCheck={false}\n          suppressContentEditableWarning\n          style={{ color: fontColor }}\n        >\n          Edit this cool title\n        </Typography>\n        <CodeEditor\n          language={language}\n          lightMode={lightMode}\n          os={os}\n          showLineNumbers={showLineNumbers}\n        />\n      </Paper>\n    );\n  }\n);\n\nexport default CaptureStage;\n","import React from \"react\";\nimport {\n  createStyles,\n  IconButton,\n  Popover,\n  Theme,\n  Tooltip,\n  WithStyles,\n  withStyles,\n} from \"@material-ui/core\";\n\nconst styles = ({ palette, spacing }: Theme) =>\n  createStyles({\n    root: {},\n    button: {},\n  });\n\ninterface Props {\n  children: JSX.Element;\n  id: string;\n  tooltip: string;\n  icon: React.ReactNode;\n}\n\nconst Picker = ({\n  children,\n  classes,\n  id,\n  icon,\n  tooltip,\n}: Props & WithStyles<typeof styles>) => {\n  const [anchorEl, setAnchorEl] = React.useState(null);\n\n  // @ts-ignore\n  const handleClick = (event) => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n\n  const open = Boolean(anchorEl);\n  const popoverId = open ? `picker-${id}-popover` : undefined;\n\n  return (\n    <>\n      <Tooltip title={tooltip} placement=\"right\">\n        <IconButton\n          aria-describedby={popoverId}\n          className={classes.button}\n          onClick={handleClick}\n          color={open ? \"primary\" : \"default\"}\n        >\n          {icon}\n        </IconButton>\n      </Tooltip>\n      <Popover\n        id={popoverId}\n        open={open}\n        anchorEl={anchorEl}\n        onClose={handleClose}\n        anchorOrigin={{\n          vertical: \"center\",\n          horizontal: \"right\",\n        }}\n        transformOrigin={{\n          vertical: \"center\",\n          horizontal: \"left\",\n        }}\n      >\n        {children}\n      </Popover>\n    </>\n  );\n};\n\nexport default withStyles(styles)(Picker);\n","import React from \"react\";\nimport { createStyles, Theme, WithStyles, withStyles } from \"@material-ui/core\";\nimport { ChromePicker } from \"react-color\";\nimport Picker from \"./Picker\";\n\nconst styles = ({ palette, spacing }: Theme) =>\n  createStyles({\n    root: {},\n    button: {},\n  });\n\ninterface Props {\n  color: string;\n  onChange: (color: string) => void;\n  id: string;\n  tooltip: string;\n  icon: React.ReactNode;\n}\n\nconst ColorPicker = ({\n  classes,\n  color,\n  onChange,\n  id,\n  icon,\n  tooltip,\n}: Props & WithStyles<typeof styles>) => {\n  return (\n    <Picker id={id} classes={classes} icon={icon} tooltip={tooltip}>\n      <ChromePicker color={color} onChange={(e) => onChange(e.hex)} />\n    </Picker>\n  );\n};\n\nexport default withStyles(styles)(ColorPicker);\n","import React from \"react\";\nimport { IconButton, Tooltip } from \"@material-ui/core\";\n\ninterface Props {\n  active: boolean;\n  onChange: (active: boolean) => void;\n  tooltip: string;\n  activeIcon: React.ReactNode;\n  inactiveIcon: React.ReactNode;\n}\n\nconst ToolbarToggle = ({\n  active,\n  activeIcon,\n  inactiveIcon,\n  onChange,\n  tooltip,\n}: Props) => {\n  return (\n    <Tooltip title={tooltip} placement=\"right\">\n      <IconButton onClick={() => onChange(!active)}>\n        {active ? activeIcon : inactiveIcon}\n      </IconButton>\n    </Tooltip>\n  );\n};\n\nexport default ToolbarToggle;\n","import React, { ChangeEvent, ReactNode, useEffect, useState } from \"react\";\nimport {\n  createStyles,\n  FormControl,\n  InputLabel,\n  MenuItem,\n  Select,\n  Theme,\n  withStyles,\n  WithStyles,\n} from \"@material-ui/core\";\nimport Picker from \"./Picker\";\nimport { monaco } from \"@monaco-editor/react\";\n\nconst styles = ({ spacing }: Theme) =>\n  createStyles({\n    formControl: {\n      margin: spacing(1),\n      minWidth: 120,\n    },\n  });\n\ninterface Props {\n  id: string;\n  icon: React.ReactNode;\n  language: string;\n  onChange: (id: string) => void;\n  tooltip: string;\n}\n\nconst LanguagePicker = ({\n  classes,\n  id,\n  icon,\n  language,\n  onChange,\n  tooltip,\n}: Props & WithStyles<typeof styles>) => {\n  const [languages, setLanguages] = useState<{ id: string; alias: string }[]>(\n    []\n  );\n\n  useEffect(() => {\n    monaco\n      .init()\n      .then((monaco) => {\n        setLanguages(\n          monaco.languages.getLanguages().map(({ id, aliases }) => ({\n            id,\n            alias: aliases?.length ? aliases[0] : id,\n          }))\n        );\n      })\n      .catch((error) =>\n        console.error(\n          \"An error occurred during initialization of Monaco: \",\n          error\n        )\n      );\n  }, []);\n\n  const handleChange = (event: ChangeEvent<ReactNode>) => {\n    const target = event.target as HTMLSelectElement;\n    onChange(target.value);\n  };\n\n  return (\n    <Picker id={id} icon={icon} tooltip={tooltip}>\n      <FormControl className={classes.formControl} variant={\"outlined\"}>\n        <InputLabel shrink id={\"language-select-label\"}>\n          Language\n        </InputLabel>\n        <Select\n          inputProps={{\n            name: \"language\",\n            id: \"language-select-label\",\n          }}\n          onChange={(event) => handleChange(event)}\n          value={language}\n        >\n          {languages.map(({ id, alias }, index) => (\n            <MenuItem key={id} value={id}>\n              {alias}\n            </MenuItem>\n          ))}\n        </Select>\n      </FormControl>\n    </Picker>\n  );\n};\n\nexport default withStyles(styles)(LanguagePicker);\n","import React from \"react\";\nimport {\n  createStyles,\n  IconButton,\n  Paper,\n  Theme,\n  withStyles,\n  WithStyles,\n} from \"@material-ui/core\";\nimport {\n  Apple,\n  LinuxMint,\n  MicrosoftWindows,\n  MonitorClean,\n} from \"mdi-material-ui\";\nimport Picker from \"./Picker\";\n\nconst styles = ({ spacing }: Theme) =>\n  createStyles({\n    root: {},\n  });\n\ninterface Props {\n  id: string;\n  onChange: (os: \"macOS\" | \"windows10\" | \"linuxMint\") => void;\n}\n\nconst OSPicker = ({ id, onChange }: Props & WithStyles<typeof styles>) => {\n  return (\n    <Picker id={id} icon={<MonitorClean />} tooltip=\"Operating system\">\n      <Paper>\n        <IconButton onClick={() => onChange(\"windows10\")}>\n          <MicrosoftWindows />\n        </IconButton>\n        <IconButton onClick={() => onChange(\"linuxMint\")}>\n          <LinuxMint />\n        </IconButton>\n        <IconButton onClick={() => onChange(\"macOS\")}>\n          <Apple />\n        </IconButton>\n      </Paper>\n    </Picker>\n  );\n};\n\nexport default withStyles(styles)(OSPicker);\n","import React from \"react\";\nimport {\n  createStyles,\n  IconButton,\n  Theme,\n  Typography,\n  WithStyles,\n  withStyles,\n} from \"@material-ui/core\";\nimport cx from \"classnames\";\nimport { grey } from \"@material-ui/core/colors\";\nimport { Github } from \"mdi-material-ui\";\n\nconst styles = ({ spacing }: Theme) =>\n  createStyles({\n    root: {\n      padding: spacing(0, 2),\n      backgroundColor: grey[300],\n      display: \"flex\",\n      alignItems: \"center\",\n      justifyContent: \"space-between\",\n    },\n  });\n\ninterface Props {\n  className?: string;\n}\n\nconst Header = ({ classes, className }: Props & WithStyles<typeof styles>) => {\n  return (\n    <div className={cx(classes.root, className)}>\n      <Typography variant={\"h6\"}>Codify</Typography>\n      <IconButton\n        href={\"https://github.com/TeamWertarbyte/codify\"}\n        target={\"_blank\"}\n      >\n        <Github />\n      </IconButton>\n    </div>\n  );\n};\n\nexport default withStyles(styles)(Header);\n","import React from \"react\";\nimport {\n  createStyles,\n  Divider,\n  Theme,\n  Typography,\n  WithStyles,\n  withStyles,\n} from \"@material-ui/core\";\nimport cx from \"classnames\";\nimport { grey } from \"@material-ui/core/colors\";\n\nconst styles = ({ spacing }: Theme) =>\n  createStyles({\n    root: {\n      padding: spacing(1, 2),\n      backgroundColor: grey[50],\n      display: \"flex\",\n      alignItems: \"center\",\n      justifyContent: \"flex-end\",\n      borderTop: `1px solid ${grey[400]}`,\n    },\n    divider: {\n      margin: spacing(0, 1),\n      backgroundColor: grey[400],\n    },\n  });\n\ninterface Props {\n  className?: string;\n}\n\nconst Footer = ({ classes, className }: Props & WithStyles<typeof styles>) => {\n  return (\n    <div className={cx(classes.root, className)}>\n      <Typography variant={\"caption\"}>\n        <a\n          href={\"https://wertarbyte.com/impressum\"}\n          target={\"_blank\"}\n          rel=\"noopener noreferrer\"\n        >\n          Imprint\n        </a>\n      </Typography>\n      <Divider className={classes.divider} orientation={\"vertical\"} />\n      <Typography variant={\"caption\"}>\n        Copyright © 2020{\" \"}\n        <a\n          href={\"https://wertarbyte.com/\"}\n          target={\"_blank\"}\n          rel=\"noopener noreferrer\"\n        >\n          Wertarbyte GmbH\n        </a>\n      </Typography>\n    </div>\n  );\n};\n\nexport default withStyles(styles)(Footer);\n","import React, { useRef, useState } from \"react\";\nimport \"./App.css\";\nimport { Fab, makeStyles, Theme } from \"@material-ui/core\";\nimport { saveAs } from \"file-saver\";\nimport { grey } from \"@material-ui/core/colors\";\n// @ts-ignore\nimport domtoimage from \"dom-to-image-more\";\nimport {\n  CodeBraces,\n  Download,\n  FormatColorFill,\n  FormatColorText,\n  Lightbulb,\n  LightbulbOutline,\n  Text,\n} from \"mdi-material-ui\";\nimport CaptureStage from \"./components/CaptureStage\";\nimport ColorPicker from \"./components/ColorPicker\";\nimport ToolbarToggle from \"./components/ToolbarToggle\";\nimport { FormatListNumbers } from \"mdi-material-ui/light\";\nimport LanguagePicker from \"./components/LanguagePicker\";\nimport OSPicker from \"./components/OSPicker\";\nimport Header from \"./Header\";\nimport Footer from \"./Footer\";\n\nconst useStyles = makeStyles(({ spacing }: Theme) => ({\n  root: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    height: \"100%\",\n  },\n  content: {\n    display: \"flex\",\n    flex: 1,\n  },\n  toolbar: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    backgroundColor: grey[300],\n    padding: spacing(1),\n  },\n  captureStageContainer: {\n    flex: 1,\n    display: \"grid\",\n    placeItems: \"center\",\n    justifyItems: \"center\",\n    backgroundColor: grey[200],\n    borderTop: `1px solid ${grey[400]}`,\n    borderLeft: `1px solid ${grey[400]}`,\n  },\n  fab: {\n    position: \"absolute\",\n    bottom: spacing(6),\n    right: spacing(2),\n  },\n  options: {\n    padding: spacing(1),\n  },\n}));\n\nfunction App() {\n  const classes = useStyles();\n  const stageRef = useRef();\n  const [backgroundColor, setBackgroundColor] = useState(\"#FFFFFF\");\n  const [fontColor, setFontColor] = useState(\"#000000\");\n  const [showLineNumbers, setShowLineNumbers] = useState(true);\n  const [lightMode, setLightMode] = useState(true);\n  const [os, setOS] = useState<\"macOS\" | \"windows10\" | \"linuxMint\">(\n    \"windows10\"\n  );\n  const [language, setLanguage] = useState<string>(\"javascript\");\n\n  const handleGenerateImage = () => {\n    domtoimage.toBlob(stageRef.current).then((blob: Blob) => {\n      saveAs(blob, `codify-${Date.now()}.png`);\n    });\n  };\n\n  return (\n    <div className={classes.root}>\n      <Header />\n      <div className={classes.content}>\n        <div className={classes.toolbar}>\n          <ColorPicker\n            id=\"background-color\"\n            tooltip=\"Background Color\"\n            color={backgroundColor}\n            onChange={setBackgroundColor}\n            icon={<FormatColorFill />}\n          />\n          <ColorPicker\n            id=\"font-color\"\n            tooltip=\"Text Color\"\n            color={fontColor}\n            onChange={setFontColor}\n            icon={<FormatColorText />}\n          />\n          <LanguagePicker\n            id=\"code-language\"\n            tooltip=\"Code language\"\n            language={language}\n            onChange={setLanguage}\n            icon={<CodeBraces />}\n          />\n          <ToolbarToggle\n            active={showLineNumbers}\n            tooltip=\"Line Numbers\"\n            onChange={setShowLineNumbers}\n            activeIcon={<FormatListNumbers />}\n            inactiveIcon={<Text />}\n          />\n          <ToolbarToggle\n            active={lightMode}\n            tooltip={lightMode ? \"Dark Mode\" : \"Light Mode\"}\n            onChange={setLightMode}\n            activeIcon={<LightbulbOutline />}\n            inactiveIcon={<Lightbulb />}\n          />\n          <OSPicker id={\"operating-system\"} onChange={setOS} />\n        </div>\n        <div className={classes.captureStageContainer}>\n          <CaptureStage\n            ref={stageRef}\n            backgroundColor={backgroundColor}\n            fontColor={fontColor}\n            language={language}\n            lightMode={lightMode}\n            os={os}\n            showLineNumbers={showLineNumbers}\n          />\n        </div>\n      </div>\n      <Footer />\n      <Fab\n        className={classes.fab}\n        onClick={handleGenerateImage}\n        color=\"primary\"\n      >\n        <Download />\n      </Fab>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport {\n  unstable_createMuiStrictModeTheme,\n  CssBaseline,\n  MuiThemeProvider,\n  PaletteType,\n} from \"@material-ui/core\";\nimport { SnackbarProvider } from \"material-ui-snackbar-provider\";\n\nconst muiTheme = (themeType: PaletteType = \"light\") =>\n  unstable_createMuiStrictModeTheme({\n    palette: {\n      primary: {\n        main: \"#005091\",\n      },\n      secondary: {\n        main: \"#348a31\",\n      },\n      error: {\n        main: \"#f44336\",\n      },\n      type: themeType,\n    },\n  });\n\nReactDOM.render(\n  <React.StrictMode>\n    <MuiThemeProvider theme={muiTheme()}>\n      <CssBaseline />\n      <SnackbarProvider SnackbarProps={{ autoHideDuration: 4000 }}>\n        <App />\n      </SnackbarProvider>\n    </MuiThemeProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}