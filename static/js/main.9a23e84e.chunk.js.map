{"version":3,"sources":["components/WindowHeader.tsx","components/CodeEditor.tsx","components/CaptureStage.tsx","components/ColorPicker.tsx","components/ToolbarToggle.tsx","components/LanguagePicker.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["withStyles","spacing","createStyles","root","display","backgroundColor","grey","padding","dot","borderRadius","margin","height","width","green","yellow","red","classes","className","cx","useStyles","makeStyles","flexDirection","overflow","marginBottom","content","flex","CodeEditor","lightMode","showLineNumbers","Paper","elevation","language","theme","value","options","selectOnLineNumbers","lineNumbers","CaptureStage","React","forwardRef","ref","fontColor","square","style","Typography","variant","gutterBottom","contentEditable","spellCheck","suppressContentEditableWarning","color","palette","button","onChange","id","icon","tooltip","useState","anchorEl","setAnchorEl","open","Boolean","popoverId","undefined","Tooltip","title","placement","IconButton","aria-describedby","onClick","event","currentTarget","Popover","onClose","anchorOrigin","vertical","horizontal","transformOrigin","e","hex","ToolbarToggle","active","activeIcon","inactiveIcon","languages","LanguagePicker","setLanguage","FormControl","InputLabel","shrink","Select","labelId","target","handleChange","map","index","MenuItem","key","toolbar","captureStageContainer","placeItems","justifyItems","fab","position","bottom","right","App","stageRef","useRef","setBackgroundColor","setFontColor","setShowLineNumbers","setLightMode","Fab","domtoimage","toBlob","current","then","blob","saveAs","Date","now","window","location","hostname","match","ReactDOM","render","StrictMode","themeType","createMuiTheme","primary","main","secondary","error","type","muiTheme","CssBaseline","SnackbarProps","autoHideDuration","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.9a23e84e.chunk.js","sourcesContent":["import React from \"react\";\nimport { createStyles, Theme, WithStyles, withStyles } from \"@material-ui/core\";\nimport cx from \"classnames\";\nimport { green, grey, red, yellow } from \"@material-ui/core/colors\";\n\nconst styles = ({ spacing }: Theme) =>\n  createStyles({\n    root: {\n      display: \"flex\",\n      backgroundColor: grey[300],\n      padding: spacing(0.5),\n    },\n    dot: {\n      borderRadius: \"50%\",\n      margin: spacing(0.25),\n      height: spacing(1),\n      width: spacing(1),\n    },\n    green: {\n      backgroundColor: green[500],\n    },\n    yellow: {\n      backgroundColor: yellow[800],\n    },\n    red: {\n      backgroundColor: red[500],\n    },\n  });\n\ninterface Props {\n  className?: string;\n}\n\nconst WindowHeader = ({\n  classes,\n  className,\n}: Props & WithStyles<typeof styles>) => {\n  return (\n    <div className={cx(classes.root, className)}>\n      <div className={cx(classes.dot, classes.red)} />\n      <div className={cx(classes.dot, classes.yellow)} />\n      <div className={cx(classes.dot, classes.green)} />\n    </div>\n  );\n};\n\nexport default withStyles(styles)(WindowHeader);\n","import React from \"react\";\nimport { Paper, makeStyles, Theme } from \"@material-ui/core\";\nimport { grey } from \"@material-ui/core/colors\";\nimport Editor from \"@monaco-editor/react\";\nimport WindowHeader from \"./WindowHeader\";\n\nconst useStyles = makeStyles(({ spacing }: Theme) => ({\n  root: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    overflow: \"hidden\",\n    width: 700,\n    height: 320,\n    backgroundColor: grey[700],\n    marginBottom: spacing(2),\n  },\n  content: {\n    flex: 1,\n  },\n}));\n\ninterface Props {\n  lightMode: boolean;\n  showLineNumbers: boolean;\n}\n\nconst CodeEditor = ({ lightMode, showLineNumbers }: Props) => {\n  const classes = useStyles();\n\n  return (\n    <Paper className={classes.root} elevation={15}>\n      <WindowHeader />\n      <div className={classes.content}>\n        <Editor\n          height={\"300px\"}\n          width={\"700px\"}\n          language=\"javascript\"\n          theme={lightMode ? \"light\" : \"dark\"}\n          value={`const fuu = () => {\n  console.log(\"Hello World!\")\n}`}\n          options={{\n            selectOnLineNumbers: false,\n            lineNumbers: showLineNumbers ? \"on\" : \"off\",\n          }}\n        />\n      </div>\n    </Paper>\n  );\n};\n\nexport default CodeEditor;\n","import React from \"react\";\nimport { Paper, makeStyles, Typography } from \"@material-ui/core\";\nimport cx from \"classnames\";\nimport CodeEditor from \"./CodeEditor\";\n\nconst useStyles = makeStyles(({ spacing }) => ({\n  root: {\n    padding: spacing(8),\n  },\n}));\n\ninterface Props {\n  className?: string;\n  backgroundColor: string;\n  fontColor: string;\n  lightMode: boolean;\n  showLineNumbers: boolean;\n}\n\nconst CaptureStage = React.forwardRef(\n  (\n    {\n      backgroundColor,\n      className,\n      fontColor,\n      lightMode,\n      showLineNumbers,\n    }: Props,\n    ref\n  ) => {\n    const classes = useStyles();\n\n    return (\n      <Paper\n        ref={ref}\n        className={cx(classes.root, className)}\n        elevation={10}\n        square\n        style={{\n          backgroundColor,\n        }}\n      >\n        <Typography\n          variant={\"h3\"}\n          gutterBottom\n          contentEditable\n          spellCheck={false}\n          suppressContentEditableWarning\n          style={{ color: fontColor }}\n        >\n          Edit this cool title\n        </Typography>\n        <CodeEditor lightMode={lightMode} showLineNumbers={showLineNumbers} />\n      </Paper>\n    );\n  }\n);\n\nexport default CaptureStage;\n","import React from \"react\";\nimport {\n  createStyles,\n  IconButton,\n  Popover,\n  Theme,\n  Tooltip,\n  WithStyles,\n  withStyles,\n} from \"@material-ui/core\";\nimport { ChromePicker } from \"react-color\";\n\nconst styles = ({ palette, spacing }: Theme) =>\n  createStyles({\n    root: {},\n    button: {},\n  });\n\ninterface Props {\n  color: string;\n  onChange: (color: string) => void;\n  id: string;\n  tooltip: string;\n  icon: React.ReactNode;\n}\n\nconst ColorPicker = ({\n  classes,\n  color,\n  onChange,\n  id,\n  icon,\n  tooltip,\n}: Props & WithStyles<typeof styles>) => {\n  const [anchorEl, setAnchorEl] = React.useState(null);\n\n  // @ts-ignore\n  const handleClick = (event) => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n\n  const open = Boolean(anchorEl);\n  const popoverId = open ? `color-picker-${id}-popover` : undefined;\n\n  return (\n    <>\n      <Tooltip title={tooltip} placement=\"right\">\n        <IconButton\n          aria-describedby={popoverId}\n          className={classes.button}\n          onClick={handleClick}\n          color={open ? \"primary\" : \"default\"}\n        >\n          {icon}\n        </IconButton>\n      </Tooltip>\n      <Popover\n        id={popoverId}\n        open={open}\n        anchorEl={anchorEl}\n        onClose={handleClose}\n        anchorOrigin={{\n          vertical: \"center\",\n          horizontal: \"right\",\n        }}\n        transformOrigin={{\n          vertical: \"center\",\n          horizontal: \"left\",\n        }}\n      >\n        <ChromePicker color={color} onChange={(e) => onChange(e.hex)} />\n      </Popover>\n    </>\n  );\n};\n\nexport default withStyles(styles)(ColorPicker);\n","import React from \"react\";\nimport { IconButton, Tooltip } from \"@material-ui/core\";\n\ninterface Props {\n  active: boolean;\n  onChange: (active: boolean) => void;\n  tooltip: string;\n  activeIcon: React.ReactNode;\n  inactiveIcon: React.ReactNode;\n}\n\nconst ToolbarToggle = ({\n  active,\n  activeIcon,\n  inactiveIcon,\n  onChange,\n  tooltip,\n}: Props) => {\n  return (\n    <Tooltip title={tooltip} placement=\"right\">\n      <IconButton onClick={() => onChange(!active)}>\n        {active ? activeIcon : inactiveIcon}\n      </IconButton>\n    </Tooltip>\n  );\n};\n\nexport default ToolbarToggle;\n","import React, { ChangeEvent, useState, ReactNode } from \"react\";\nimport { FormControl, InputLabel, MenuItem, Select } from \"@material-ui/core\";\n\nconst languages = [\"javascript\", \"java\", \"python\"];\n\nconst LanguagePicker = () => {\n  const [language, setLanguage] = useState(\"javascript\");\n\n  const handleChange = (event: ChangeEvent<ReactNode>) => {\n    const target = event.target as HTMLSelectElement;\n    setLanguage(target.value);\n  };\n\n  return (\n    <FormControl variant={\"outlined\"}>\n      <InputLabel shrink id={\"language-select-label\"}>\n        Language\n      </InputLabel>\n      <Select\n        labelId=\"language-select-label\"\n        id=\"language-select\"\n        onChange={(event) => handleChange(event)}\n        value={language}\n      >\n        {languages.map((language, index) => (\n          <MenuItem key={index} value={language}>\n            {language}\n          </MenuItem>\n        ))}\n      </Select>\n    </FormControl>\n  );\n};\n\nexport default LanguagePicker;\n","import React, { useRef, useState } from \"react\";\nimport \"./App.css\";\nimport { Fab, makeStyles, Theme } from \"@material-ui/core\";\nimport { saveAs } from \"file-saver\";\nimport { grey } from \"@material-ui/core/colors\";\n// @ts-ignore\nimport domtoimage from \"dom-to-image-more\";\nimport {\n  Download,\n  FormatColorFill,\n  FormatColorText,\n  Lightbulb,\n  LightbulbOutline,\n  Text,\n} from \"mdi-material-ui\";\nimport CaptureStage from \"./components/CaptureStage\";\nimport ColorPicker from \"./components/ColorPicker\";\nimport ToolbarToggle from \"./components/ToolbarToggle\";\nimport { FormatListNumbers } from \"mdi-material-ui/light\";\nimport LanguagePicker from \"./components/LanguagePicker\";\n\nconst useStyles = makeStyles(({ spacing }: Theme) => ({\n  root: {\n    display: \"flex\",\n    height: \"100%\",\n  },\n  toolbar: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    backgroundColor: grey[300],\n    padding: spacing(1),\n  },\n  captureStageContainer: {\n    flex: 1,\n    display: \"grid\",\n    placeItems: \"center\",\n    justifyItems: \"center\",\n    backgroundColor: grey[200],\n  },\n  fab: {\n    position: \"absolute\",\n    bottom: spacing(2),\n    right: spacing(2),\n  },\n}));\n\nfunction App() {\n  const classes = useStyles();\n  const stageRef = useRef();\n  const [backgroundColor, setBackgroundColor] = useState(\"#FFFFFF\");\n  const [fontColor, setFontColor] = useState(\"#000000\");\n  const [showLineNumbers, setShowLineNumbers] = useState(true);\n  const [lightMode, setLightMode] = useState(true);\n\n  const handleGenerateImage = () => {\n    domtoimage.toBlob(stageRef.current).then((blob: Blob) => {\n      saveAs(blob, `codify-${Date.now()}.png`);\n    });\n  };\n\n  return (\n    <div className={classes.root}>\n      <div className={classes.toolbar}>\n        <ColorPicker\n          id=\"background-color\"\n          tooltip=\"Background Color\"\n          color={backgroundColor}\n          onChange={setBackgroundColor}\n          icon={<FormatColorFill />}\n        />\n        <ColorPicker\n          id=\"font-color\"\n          tooltip=\"Text Color\"\n          color={fontColor}\n          onChange={setFontColor}\n          icon={<FormatColorText />}\n        />\n        <ToolbarToggle\n          active={showLineNumbers}\n          tooltip=\"Line Numbers\"\n          onChange={setShowLineNumbers}\n          activeIcon={<FormatListNumbers />}\n          inactiveIcon={<Text />}\n        />\n        <ToolbarToggle\n          active={lightMode}\n          tooltip={lightMode ? \"Dark Mode\" : \"Light Mode\"}\n          onChange={setLightMode}\n          activeIcon={<LightbulbOutline />}\n          inactiveIcon={<Lightbulb />}\n        />\n      </div>\n      <LanguagePicker />\n      <div className={classes.captureStageContainer}>\n        <CaptureStage\n          ref={stageRef}\n          backgroundColor={backgroundColor}\n          fontColor={fontColor}\n          lightMode={lightMode}\n          showLineNumbers={showLineNumbers}\n        />\n      </div>\n      <Fab\n        className={classes.fab}\n        onClick={handleGenerateImage}\n        color=\"primary\"\n      >\n        <Download />\n      </Fab>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport {\n  createMuiTheme,\n  CssBaseline,\n  MuiThemeProvider,\n  PaletteType,\n} from \"@material-ui/core\";\nimport { SnackbarProvider } from \"material-ui-snackbar-provider\";\n\nconst muiTheme = (themeType: PaletteType = \"light\") =>\n  createMuiTheme({\n    palette: {\n      primary: {\n        main: \"#005091\",\n      },\n      secondary: {\n        main: \"#348a31\",\n      },\n      error: {\n        main: \"#f44336\",\n      },\n      type: themeType,\n    },\n  });\n\nReactDOM.render(\n  <React.StrictMode>\n    <MuiThemeProvider theme={muiTheme()}>\n      <CssBaseline />\n      <SnackbarProvider SnackbarProps={{ autoHideDuration: 4000 }}>\n        <App />\n      </SnackbarProvider>\n    </MuiThemeProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}